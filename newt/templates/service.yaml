{{- $root := . -}}
{{- range $i, $inst := .Values.newtInstances }}
{{- $svc := (default (dict) $inst.service) -}}
{{- /* service.enabled defaults to true only when key is not present; if explicitly false, respect it */ -}}
{{- $svcEnabled := ternary $svc.enabled true (hasKey $svc "enabled") -}}
{{- if and $inst.enabled $svcEnabled }}
---
apiVersion: v1
kind: Service
metadata:
  name: {{ include "newt.instance.fullname" (dict "root" $root "inst" $inst) }}
  labels:
    {{- include "newt.labels" $root | nindent 4 }}
    newt.instance: {{ $inst.name }}
    {{- /* Global extra labels for external Services */}}
    {{- range $k,$v := $root.Values.global.additionalServiceLabels }}
    {{ $k }}: {{ $v | quote }}
    {{- end }}
    {{- /* Per-instance service labels */}}
    {{- with $svc.labels }}
    {{- range $k,$v := . }}
    {{ $k }}: {{ $v | quote }}
    {{- end }}
    {{- end }}
  {{- /* Merge global + service annotations */}}
  {{- $svcAnns := dict }}
  {{- range $k,$v := $root.Values.global.additionalAnnotations }}
  {{- $_ := set $svcAnns $k (printf "%v" $v) }}
  {{- end }}
  {{- range $k,$v := $root.Values.global.additionalServiceAnnotations }}
  {{- $_ := set $svcAnns $k (printf "%v" $v) }}
  {{- end }}
  {{- with $svc.annotations }}
  {{- range $k,$v := . }}
  {{- $_ := set $svcAnns $k (printf "%v" $v) }}
  {{- end }}
  {{- end }}
  {{- if gt (len $svcAnns) 0 }}
  annotations:
    {{- toYaml $svcAnns | nindent 4 }}
  {{- end }}
spec:
  type: {{ default "LoadBalancer" $svc.type }}
  {{- with $svc.externalTrafficPolicy }}
  externalTrafficPolicy: {{ . }}
  {{- end }}
  {{- if eq (default "LoadBalancer" $svc.type) "LoadBalancer" }}
  {{- with $svc.loadBalancerIP }}
  loadBalancerIP: {{ . | quote }}
  {{- end }}
  {{- with $svc.loadBalancerClass }}
  loadBalancerClass: {{ . | quote }}
  {{- end }}
  {{- with $svc.loadBalancerSourceRanges }}
  loadBalancerSourceRanges:
    {{- toYaml . | nindent 4 }}
  {{- end }}
  {{- end }}
  selector:
    app.kubernetes.io/instance: {{ $root.Release.Name }}
    newt.instance: {{ $inst.name }}
  {{- /* Safe defaults for optional nodePorts */}}
  {{- $nodePorts := (default (dict) $svc.nodePorts) }}
  {{- $wgNodePort := (get $nodePorts "wg") }}
  {{- $testerNodePort := (get $nodePorts "tester") }}
  ports:
    - name: wg
      port: {{ default 51820 $svc.port }}
      targetPort: 51820
      protocol: UDP
      {{- if and (eq (default "LoadBalancer" $svc.type) "NodePort") $wgNodePort }}
      nodePort: {{ $wgNodePort | int }}
      {{- end }}
    - name: tester
      port: {{ default 51821 $svc.testerPort }}
      targetPort: 51821
      protocol: UDP
      {{- if and (eq (default "LoadBalancer" $svc.type) "NodePort") $testerNodePort }}
      nodePort: {{ $testerNodePort | int }}
      {{- end }}
{{- end }}
{{- end }}
