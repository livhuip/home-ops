# Default values for Newt.
# This is a YAML-formatted file.
# yaml-language-server: $schema=./values.schema.json
# Declare variables to be passed into templates.
#
# NOTE: The comments in this file are consumed by helm-docs to generate the README.md
# See https://github.com/norwoodj/helm-docs

## @section Global parameters
global:
  # -- Global Docker image settings for all components in the Helm chart  
  image: # @schema additionalProperties: false
    # -- Global Docker image registry
    registry: "docker.io"
    # -- Global Docker image repository
    repository: "fosrl/newt"
    # -- Global Docker image tag (defaults to chart appVersion if not set)
    tag: ""
    # -- Optional image digest (overrides tag)
    digest: ""
    # -- Global Docker image pull policy
    imagePullPolicy: IfNotPresent # @schema enum: [Always, IfNotPresent, Never]
    # -- Global Docker registry secret
    imagePullSecrets: [] # @schema type:[array, null] ; item: object ; itemProperties: {"name": {"type": "string"}}

  # -- Override the name of the chart (replaces `.Chart.Name`)
  nameOverride: ""
  # -- String to fully override "RELEASE-NAME.fullname"
  fullnameOverride: ""
  # -- Override the namespace of resources. Defaults to `.Release.Namespace`
  namespaceOverride: ""

  # -- Additional labels to be added to all resources
  additionalLabels: {} # @schema type: object
  # -- Additional annotations to be added to all resources
  additionalAnnotations: {} # @schema type: object
  # -- Additional labels to add to all external Service resources
  additionalServiceLabels: {} # @schema type: object
  # -- Additional annotations to add to all external Service resources
  additionalServiceAnnotations: {} # @schema type: object
  # -- Annotations to add to all StatefulSet resources
  statefulsetAnnotations: {} # @schema type: object
  # -- Annotations to add to all Deployment resources
  deploymentAnnotations: {} # @schema type: object
  # -- Labels to add to all Deployment resources
  deploymentLabels: {} # @schema type: object
  # -- Annotations to add to all Pod resources
  podAnnotations: {} # @schema type: object
  # -- Labels to add to all Pod resources
  podLabels: {} # @schema type: object
  # -- Extra environment variables to add to all containers (global scope)
  extraEnv: {} # @schema type: object

  # -- Revision history limit for deployments/statefulsets
  revisionHistoryLimit: 3

  # -- Global NetworkPolicy settings applied by this chart.
  networkPolicy:
    # -- Enable creation of NetworkPolicy resources for all components
    create: true
    # -- Default deny all ingress traffic when network policies are enabled
    defaultDenyIngress: false

  # -- Priority class name applied to all pods
  priorityClassName: ""
  # -- Node selector applied to all pods
  nodeSelector: {} # @schema type: object
  # -- Tolerations applied to all pods
  tolerations: [] # @schema type: array
  # -- affinity rules for all components
  affinity: {} # @schema type: object

  # -- PodDisruptionBudget for production deployments (optional, disabled by default)
  podDisruptionBudget:
    enabled: false
    # -- Minimum available pods during disruptions (cannot be used with maxUnavailable)
    minAvailable: 1
    # -- Maximum unavailable pods during disruptions (cannot be used with minAvailable)
    maxUnavailable: ""
    # -- Additional annotations for PodDisruptionBudget
    annotations: {}
    # -- Additional labels for PodDisruptionBudget
    labels: {}
  # -- Pod-level securityContext override
  podSecurityContext: {} # @schema type: object
  # -- Container-level securityContext override
  securityContext: {} # @schema type: object

  # -- Global log level setting
  logLevel: "INFO"

  nativeMode:
    # -- Master switch to allow native WireGuard interface usage (privileged)
    enabled: false

  notes:
    # -- Default internal Traefik target used in NOTES output
    defaultTraefikTarget: "traefik.kube-system.svc.cluster.local:80"

  # -- Map of script filename to content for up/down scripts mounted when updown.enabled=true
  updownScripts: {} # @schema type: object

  health:
    # -- Enable liveness/readiness probes (file existence)
    enabled: true
    # -- Default health file path (instances can override with healthFile)
    path: "/tmp/healthy"
    # -- Readiness probe failure threshold
    readinessFailureThreshold: 3

  resources:
    requests:
      # -- CPU request
      cpu: "100m"
      # -- Memory request
      memory: "128Mi"
      # -- Ephemeral storage request
      ephemeral-storage: "128Mi"
    limits:
      # -- CPU limit
      cpu: "200m"
      # -- Memory limit
      memory: "256Mi"
      # -- Ephemeral storage limit
      ephemeral-storage: "256Mi"

  tests:
    # -- Helm test pod configuration
    enabled: false
    image:
      # -- Test image repository
      repository: bitnami/kubectl
      # -- Test image tag
      tag: "1.28.15"
      # -- Test image pull policy
      pullPolicy: IfNotPresent # @schema enum: [Always, IfNotPresent, Never]

  # @section Global Metrics
  metrics:
  # -- Enable Prometheus metrics
    enabled: false
    # -- Metrics port
    port: 9090
    # -- Metrics path
    path: /metrics
    # -- Override or add custom metrics annotations
    annotations: {}
    # -- Optional Service port name
    portName: metrics
    # -- Optional container port name to target instead of number
    targetPortName: ""
    service:
      # -- Create metrics Service for scraping
      enabled: false
      # -- Service type
      type: ClusterIP # @schema enum: [ClusterIP, LoadBalancer, NodePort]
      # -- Service port
      port: 9090
      # -- Service port name
      portName: metrics
      # -- Service annotations
      annotations: {} # @schema type: object
    podMonitor:
      # -- Create PodMonitor (Prometheus Operator)
      enabled: false
      # -- API version for PodMonitor
      apiVersion: monitoring.coreos.com/v1
      # -- Optional namespace override
      namespace: ""
      # -- PodMonitor scrape port name
      portName: metrics
      # -- HTTP scheme
      scheme: http
      # -- HTTP path
      path: /metrics
      # -- Scrape interval
      interval: 30s
      # -- Scrape timeout
      scrapeTimeout: 10s
      # -- Honor labels from target
      honorLabels: true
      # -- Extra labels
      labels: {} # @schema type: object
      # -- Extra annotations
      annotations: {}
      # -- Relabelings
      relabelings: [] # @schema type: array ; item: object
      # -- Metric relabelings
      metricRelabelings: [] # @schema type: array ; item: object
    serviceMonitor:
      # -- Create ServiceMonitor (Prometheus Operator)
      enabled: false
      # -- API version for ServiceMonitor
      apiVersion: monitoring.coreos.com/v1
      # -- Optional namespace override
      namespace: ""
      # -- Extra labels on ServiceMonitor
      labels: {} # @schema type: object
      # -- Scrape interval
      interval: 30s # @schema type: string
      # -- Optional scrape timeout
      scrapeTimeout: 10s
      # -- Job label override
      jobLabel: ""
      # -- HTTP scheme
      scheme: http
      # -- Relabelings
      relabelings: [] # @schema type: array ; item: object
      # -- Metric relabelings
      metricRelabelings: [] # @schema type: array ; item: object
      # -- Target labels
      targetLabels: [] # @schema type: array ; item: string
      # -- Sample limit
      sampleLimit: 0 # @schema type: integer
    prometheusRule:
      # -- Create PrometheusRule (Prometheus Operator)
      enabled: false
      # -- API version for PrometheusRule
      apiVersion: monitoring.coreos.com/v1
      # -- Optional namespace override
      namespace: ""
      # -- Extra labels on PrometheusRule
      labels: {}
      # -- Array of rule groups/rules (processed as templates)
      rules: []

# Chart-level image fallback (prefer global.image)
image:
  # -- Container image repository (fallback; prefer global.image)
  repository: ""
  # -- Image tag (ignored if digest is set)
  tag: ""
  # -- Image pull policy (fallback when global.image.imagePullPolicy not set)
  pullPolicy: IfNotPresent # @schema enum: [Always, IfNotPresent, Never]
  # -- Image digest (sha256:...)
  digest: ""

# @section Newt instances
newtInstances:
  - name: "main-tunnel" # @schema pattern: ^[a-z0-9]([-a-z0-9]*[a-z0-9])?$ ; minLength: 1 ; maxLength: 63
    # -- Allow this instance to override global settings (image, logLevel, etc)
    allowGlobalOverride: false
    # Preferred: use an existing Secret to source all credentials
    auth:
      # -- Name of the existing Secret with endpoint/id/secret keys
      existingSecretName: ""
      # -- Key mappings used inside the existing Secret
      keys:
        # -- Key name for the Pangolin endpoint (default: PANGOLIN_ENDPOINT)
        endpointKey: PANGOLIN_ENDPOINT
        # -- Key name for the Newt ID (default: NEWT_ID)
        idKey: NEWT_ID
        # -- Key name for the Newt secret (default: NEWT_SECRET)
        secretKey: NEWT_SECRET
    # Alternative (inline): provide credentials directly (schema enforces non-empty when used)
    # -- Pangolin control-plane endpoint URL (e.g., <https://pangolin.example.com>)
    pangolinEndpoint: "https://pangolin.example.com" # @schema pattern: ^https?://[a-zA-Z0-9.-]+(/.*)?$
    # -- Instance ID issued by Pangolin
    id: ""
    # -- Instance secret issued by Pangolin
    secret: ""
    # -- Health file path used by liveness/readiness probes
    healthFile: "/tmp/healthy"
    # -- Per-instance log level (falls back to global.logLevel when empty)
    logLevel: "INFO"
    # -- WireGuard interface MTU (typical cloud path MTU ~1380). Leave at 1280 unless tuning
    mtu: 1280
    # -- Optional DNS server address pushed to the client (leave empty to omit)
    dns: ""
    # -- Optional ping interval (e.g., "3s"). Leave empty to use default
    pingInterval: ""
    # -- Optional ping timeout (e.g., "5s"). Leave empty to use default
    pingTimeout: ""
    # -- Accept client connections for runtime only (ACCEPT_CLIENTS env). Does NOT create any Service; Service is controlled by newtInstances[x].service.enabled
    acceptClients: false
    # -- Use native WireGuard kernel interface (requires nativeMode.enabled=true and privileged)
    useNativeInterface: false
    # -- WireGuard interface name in the pod
    interface: "newt"
    # -- Keep the interface on shutdown (native mode)
    keepInterface: false
    # -- Optional config file path for Newt (CONFIG_FILE env)
    configFile: ""
    # -- Optional path to save generated private key (GENERATE_AND_SAVE_KEY_TO env)
    generateAndSaveKeyTo: ""
    dockerSocket:
      # -- Mount the host's Docker socket into the pod
      enabled: false
      # -- Docker socket mount path
      path: "/var/run/docker.sock"
      # -- Enforce Docker network validation when enabled
      enforceNetworkValidation: false
    mtls:
      # -- Enable mTLS client cert mounting (PKCS12)
      enabled: false
      # -- Secret name containing client.p12 (if empty and p12Base64 provided, a Secret is generated)
      secretName: ""
      # -- In-container path to mount the PKCS12 file
      certPath: "/certs/client.p12"
      # -- Inline base64 content for client.p12 (not recommended for production)
      p12Base64: ""
    updown:
      # -- Mount and execute a shared up/down script
      enabled: false
      # -- (Deprecated) inline script content (prefer updownScripts map)
      script: ""
      # -- Container mount path for up/down script files
      mountPath: "/opt/newt/updown"
      # -- (Deprecated) filename for the single up/down script
      fileName: "updown.sh"
    # -- Pod-level securityContext override
    podSecurityContext: {}
    # -- Container-level securityContext override
    securityContext: {}
    service:
      # -- Create a Service for this instance
      enabled: true
      # -- Service type for this instance
      type: LoadBalancer # @schema enum: [ClusterIP, LoadBalancer, NodePort]
      # -- WireGuard UDP service port
      port: 51820
      # -- Tester/diagnostic UDP service port
      testerPort: 51821
      # -- External traffic policy (Cluster or Local). Empty = omit field
      externalTrafficPolicy: "" # @schema enum: ["", Cluster, Local]
      # -- Static loadBalancerIP (when type=LoadBalancer). Empty = omit field
      loadBalancerIP: ""
      # -- loadBalancerClass (when type=LoadBalancer). Empty = omit field
      loadBalancerClass: ""
      # -- Source ranges to allow (when type=LoadBalancer). Empty = omit field
      loadBalancerSourceRanges: []
      # -- NodePorts for NodePort type (optional, set only to fix ports)
      nodePorts:
        # -- NodePort to expose WireGuard UDP (leave empty to let K8s assign one)
        wg: "" # @schema type: [integer, string]
        # -- NodePort to expose tester UDP (leave empty to let K8s assign one)
        tester: "" # @schema type: [integer, string]
      # -- Service annotations
      annotations: {}
      # -- Additional service labels
      labels: {}
    resources:
      requests:
        # -- CPU request
        cpu: "100m"
        # -- Memory request
        memory: "128Mi"
        # -- Ephemeral storage request
        ephemeral-storage: "128Mi"
      limits:
        # -- CPU limit
        cpu: "500m"
        # -- Memory limit
        memory: "256Mi"
        # Optional: also set a limit if desired
    # -- Node selection constraints
    nodeSelector: {}
    # -- Pod tolerations
    tolerations: []
    # -- Pod affinity and anti-affinity
    affinity: {}
    # -- Extra environment variables to inject into the container
    extraEnv: {} # @schema type: object
    # -- Extra pod volumes to add
    extraVolumes: [] # @schema type: array ; item: object
    # -- Extra volume mounts to add to the container
    extraVolumeMounts: [] # @schema type: array ; item: object
    # -- Additional init containers to add to the pod
    initContainers: [] # @schema type: array ; item: object
    # -- Additional sidecar containers to add to the pod
    extraContainers: [] # @schema type: array ; item: object
    # -- Use command/args instead of environment-variable configuration
    useCommandArgs: false # @schema type: boolean
    # -- Enable host networking (useful with native mode)
    hostNetwork: false
    # -- Enable sharing host PID namespace (rarely needed)
    hostPID: false

rbac:
  # -- Create RBAC resources (Role/RoleBinding or ClusterRole/ClusterRoleBinding)
  create: false
  # -- Create ClusterRole/Binding instead of namespaced Role/Binding
  clusterRole: false
  # -- RBAC resource annotations
  annotations: {} # @schema type: object
  # -- RBAC resource labels
  labels: {} # @schema type: object

# -- ServiceAccount settings
serviceAccount:
  # -- Create a dedicated ServiceAccount
  create: false
  # -- ServiceAccount name (empty = auto-generated when create=true, else default)
  name: ""
  # -- Additional annotations for the ServiceAccount
  annotations: {} # @schema type: object
  # -- Control automounting of the ServiceAccount token on pods
  automountServiceAccountToken: false # @schema type: boolean
